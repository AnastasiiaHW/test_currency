{"version":3,"file":"static/js/749.0c96509f.chunk.js","mappings":"iOAaaA,EAAe,SAAH,GAEoD,IAD3EC,EAAO,EAAPA,QAEA,EAAkCC,EAAAA,UAAwB,GAAM,eAAzDC,EAAS,KAAEC,EAAY,KAC9B,EAA4BF,EAAAA,SAAgC,MAAK,eAA1DG,EAAM,KAAEC,EAAS,KACxB,EAA0BJ,EAAAA,SAAuB,IAAG,eAA7CK,EAAK,KAAEC,EAAQ,KAEhBC,EAAS,yCAAG,WAAOC,GAAc,4EAClB,OAAnBN,GAAa,GAAM,kBAGEH,EAAQS,GAAQ,KAAD,EAA5BC,EAAI,OACVH,EAAS,IACTF,EAAUK,GAAM,gDAEG,kBAAR,EAAP,GAAyBH,EAAS,EAAD,IAChCA,EAAS,iBACdF,EAAU,MAAM,QAEI,OAFJ,UAEhBF,GAAa,GAAO,4EAEvB,gBAdc,sCAgBf,MAAO,CAAED,UAAAA,EAAWI,MAAAA,EAAOE,UAAAA,EAAWJ,OAAAA,EACxC,C,gKChBA,EAbkD,SAACO,GACjD,OACE,SAACC,EAAA,GAAS,QACRC,GAAI,CAAEC,MAAO,QACbC,MAAM,UACNC,KAAK,QACLC,YAAY,yBACZC,QAAQ,YACJP,GAGV,E,UCZMQ,EAAQ,sCAsCd,EApCoC,WAClC,MAA0BlB,EAAAA,SAAuB,IAAG,eAA7CmB,EAAK,KAAEC,EAAQ,KACtB,EAA8BpB,EAAAA,UAAwB,GAAM,eAArDqB,EAAO,KAAEC,EAAU,KAE1B,GAAgDxB,EAAAA,EAAAA,GAAa,CAAEC,QAASwB,EAAAA,KAAhEhB,EAAS,EAATA,UAAWJ,EAAM,EAANA,OAAQF,EAAS,EAATA,UAAWI,EAAK,EAALA,MAItCL,EAAAA,WAAgB,WACVmB,EAAMK,MAAM,IAAIC,OAAOP,IAASI,GAAW,GAC1CA,GAAW,EAClB,GAAG,CAACH,IAUJ,OACE,UAACO,EAAA,EAAG,YACF,UAACA,EAAA,EAAG,CAACd,GAAI,CAAEe,QAAS,OAAQC,IAAK,QAAS,WACxC,SAAC,EAAY,CAACC,MAAOV,EAAOW,SAlBR,SAACC,GAAsC,OAAKX,EAASW,EAAEC,OAAOH,MAAO,KAmBzF,SAACI,EAAA,EAAM,CAACC,UAAWb,EAASc,QAZJ,WAC5B,MAA2BhB,EAAMiB,MAAM,MAAK,eAArCC,EAAI,KAAEC,EAAU,KACvB,EAA+BD,EAAKD,MAAM,KAAI,eAAvCG,EAAM,KAAEC,EAAY,KAEvBA,GAAgBF,GAAcC,GAChChC,EAAU,CAAE8B,KAAMG,EAAaC,OAAQC,GAAIJ,EAAWG,OAAQF,OAAQA,EAAOE,QACjF,EAMiE,yBAI7D,SAACE,EAAA,EAAW,CAAC1C,UAAWA,EAAWI,MAAOA,EAAM,SAC7CF,IAAU,UAACuB,EAAA,EAAG,sBAAUvB,EAAOA,cAIxC,C,8ECzCA,GAAeyC,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,qGACD,S,UCCJ,G,QAFyB,WAAH,OAAS,gBAAK,cAAY,SAASC,UAAU,iBAAuB,GCD7EC,GAAgBC,E,OAAAA,IAAOvB,EAAAA,EAAPuB,CAAY,CACvCtB,QAAS,OACTuB,eAAgB,SAChBC,WAAY,WCuBd,EAhBgD,SAAH,GAAwC,IAAlClD,EAAS,EAATA,UAAWI,EAAK,EAALA,MAAO+C,EAAQ,EAARA,SACnE,OAAInD,GAEA,SAAC+C,EAAa,CAAC,cAAY,cAAa,UACtC,SAAC,EAAM,MAGT3C,GAEA,SAAC2C,EAAa,CAAC,cAAY,aAAY,UACrC,SAACK,EAAK,OAGL,SAAC3B,EAAA,EAAG,UAAE0B,GACf,C","sources":["hooks/useLazyQuery.ts","components/ConvertField/ConvertField.tsx","pages/CurrencyConverter/CurrencyConverter.tsx","../node_modules/@mui/icons-material/esm/Error.js","stories/Loader/Loader.tsx","stories/QueryStatus/QueryStatus.styles.ts","stories/QueryStatus/QueryStatus.tsx"],"sourcesContent":["import React from 'react';\n\ninterface UseQueryParams<Params, Response> {\n  fetcher: (params: Params) => Promise<Response>;\n}\n\ninterface UseQueryResponse<Params, Response> {\n  isLoading: boolean;\n  error: string;\n  fetchData: (params: Params) => void;\n  result: Response | null;\n}\n\nexport const useLazyQuery = <Params, Response>({\n  fetcher\n}: UseQueryParams<Params, Response>): UseQueryResponse<Params, Response> => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [result, setResult] = React.useState<Response | null>(null);\n  const [error, setError] = React.useState<string>('');\n\n  const fetchData = async (params: Params) => {\n    setIsLoading(true);\n\n    try {\n      const data = await fetcher(params);\n      setError('');\n      setResult(data);\n    } catch (err: unknown) {\n      if (typeof err === 'string') setError(err);\n      else setError('Unknown error');\n      setResult(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return { isLoading, error, fetchData, result };\n};\n","import React from 'react';\nimport { TextField, TextFieldProps } from '@mui/material';\n\ntype ConvertFieldProps = {\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n} & TextFieldProps;\n\nconst ConvertField: React.FC<ConvertFieldProps> = (props) => {\n  return (\n    <TextField\n      sx={{ width: '100%' }}\n      label=\"Convert\"\n      size=\"small\"\n      placeholder=\"example: 15 usd in uah\"\n      variant=\"outlined\"\n      {...props}\n    />\n  );\n};\n\nexport default ConvertField;\n","import React from 'react';\nimport { Box, Button } from '@mui/material';\nimport { convertCurrecy } from '../../core/api';\nimport { useLazyQuery } from '../../hooks';\nimport ConvertField from '../../components/ConvertField/ConvertField';\nimport QueryStatus from '../../stories/QueryStatus/QueryStatus';\n\nconst regex = /^[0-9]* [A-Za-z]{3} in [A-Za-z]{3}$/;\n\nconst CurrencyConverter: React.FC = () => {\n  const [input, setInput] = React.useState<string>('');\n  const [isValid, setIsValid] = React.useState<boolean>(false);\n\n  const { fetchData, result, isLoading, error } = useLazyQuery({ fetcher: convertCurrecy });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setInput(e.target.value);\n\n  React.useEffect(() => {\n    if (input.match(new RegExp(regex))) setIsValid(true);\n    else setIsValid(false);\n  }, [input]);\n\n  const handleConvertCurrency = () => {\n    const [from, toCurrency] = input.split('in');\n    const [amount, fromCurrency] = from.split(' ');\n\n    if (fromCurrency && toCurrency && amount)\n      fetchData({ from: fromCurrency.trim(), to: toCurrency.trim(), amount: amount.trim() });\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', gap: '15px' }}>\n        <ConvertField value={input} onChange={handleInputChange} />\n        <Button disabled={!isValid} onClick={handleConvertCurrency}>\n          Convert\n        </Button>\n      </Box>\n      <QueryStatus isLoading={isLoading} error={error}>\n        {result && <Box>result: {result.result}</Box>}\n      </QueryStatus>\n    </Box>\n  );\n};\n\nexport default CurrencyConverter;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"\n}), 'Error');","import React from 'react';\nimport './Loader.css';\n\nconst Loader: React.FC = () => <div data-testid=\"loader\" className=\"lds-dual-ring\"></div>;\n\nexport default Loader;\n","import { Box, styled } from '@mui/material';\n\nexport const CenterContent = styled(Box)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n","import { Error } from '@mui/icons-material';\nimport { Box } from '@mui/material';\nimport React from 'react';\nimport Loader from '../Loader/Loader';\nimport { CenterContent } from './QueryStatus.styles';\n\ninterface QueryStatusProps {\n  isLoading: boolean;\n  error: string;\n  children: React.ReactNode;\n}\n\nconst QueryStatus: React.FC<QueryStatusProps> = ({ isLoading, error, children }) => {\n  if (isLoading)\n    return (\n      <CenterContent data-testid=\"loader-icon\">\n        <Loader />\n      </CenterContent>\n    );\n  if (error)\n    return (\n      <CenterContent data-testid=\"error-icon\">\n        <Error />\n      </CenterContent>\n    );\n  return <Box>{children}</Box>;\n};\n\nexport default QueryStatus;\n"],"names":["useLazyQuery","fetcher","React","isLoading","setIsLoading","result","setResult","error","setError","fetchData","params","data","props","TextField","sx","width","label","size","placeholder","variant","regex","input","setInput","isValid","setIsValid","convertCurrecy","match","RegExp","Box","display","gap","value","onChange","e","target","Button","disabled","onClick","split","from","toCurrency","amount","fromCurrency","trim","to","QueryStatus","createSvgIcon","_jsx","d","className","CenterContent","styled","justifyContent","alignItems","children","Error"],"sourceRoot":""}